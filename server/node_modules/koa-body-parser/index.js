var getRawBody = require('raw-body')
var zlib = require('zlib')

module.exports = function (app, options) {
  options = options || {}

  var limit = options.limit || '1mb'
  var strict = options.strict !== false
  var reviver = options.reviver
  var querystring = options.querystring || require('querystring')

  app.request.urlencoded = function* (lim) {
    if (!this.is('application/x-www-form-urlencoded') || this.length === 0)
      return

    var str = yield* this.string(lim)

    try {
      return querystring.parse(str, options)
    } catch (err) {
      err.status = 400
      throw err
    }
  }

  app.request.json = function* (lim) {
    if (!this.is('json') || this.length === 0)
      return

    var str = yield* this.string(lim)
    str = str.trim()

    if (!str.length)
      this.ctx.error(400, 'invalid json, empty body')

    if (strict !== false) {
      var first = str[0]
      if ('{' !== first && '[' !== first)
        this.ctx.error(400, 'invalid json')
    }

    try {
      return JSON.parse(str, reviver)
    } catch (err) {
      err.status = 400
      throw err
    }
  }

  app.request.string = function* (lim) {
    var buffer = yield* this.buffer(lim)
    return buffer.toString('utf8')
  }

  app.request.buffer = function* (lim) {
    var decoder
    switch (this.get('content-encoding') || 'identity') {
      case 'gzip':
        decoder = zlib.createGunzip()
        break
      case 'deflate':
        decoder = zlib.createInflate()
        break
      case 'identity':
        break
      default:
        this.ctx.error(415, 'invalid content-encoding')
    }

    var req = this.req

    if (decoder) {
      var close = function () {
        decoder.close()
        cleanup()
      }

      var cleanup = function () {
        req = decoder = null
        req.removeListener('end', cleanup)
        req.removeListener('error', cleanup)
        req.removeListener('close', cleanup)
      }

      req.once('close', close)
      req.once('error', close)
      req.once('end', cleanup)
    }

    return yield getRawBody(decoder
        ? req.pipe(decoder)
        : req, {
      limit: lim || limit,
      length: !decoder && this.length
    })
  }

  return app
}